package com.example.accessingdatamysql.myorg;

import com.example.accessingdatamysql.User;
import com.example.accessingdatamysql.UserRepository;
import com.example.accessingdatamysql.auth.AuthController;
import com.example.accessingdatamysql.auth.JWT;
import com.example.accessingdatamysql.Request;
import jakarta.persistence.criteria.CriteriaBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@CrossOrigin
@RestController // This means that this class is a Controller
@RequestMapping(path="/myrequests") // This means URL's start with /myrequests (after Application path)
public class MyRequestsController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private RequestsRepository requestsRepository;

    @Autowired
    private UserRepository userRepository;

    @PostMapping(path="/user")
    public @ResponseBody Map<String, Object> getUsersRequests(@RequestBody Map<String, Object> json)
    {
        System.out.println("in user");
        Map<String, Object> response = new HashMap<>();
        User found = new User();
        AuthController au = new AuthController();
        Map<String, String> res =  au.verify(json); // if the jwt token could not be verified
        if (res.containsKey("login") && res.get("login").equals("failed"))
        {
            response.put("result", "failed = bad token or bad request");
            return response;
        }
        Optional<User> usr = userRepository.findById(res.get("user"));
        if (!usr.isPresent())
        {
            response.put("result", "failed = user not found");
            return response;
        }
        response.put("result", "success");
        response.put("data", requestsRepository.findUserRequests(res.get("user")));
        return response;
    }
}